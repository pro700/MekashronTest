//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.33440.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="IICUTechbinding", Namespace="http://tempuri.org/")]
public partial class IICUTechservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback LoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback RegisterNewCustomerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCustomerInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateCustomerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLocationsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCamerasOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetLocationOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetCameraOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetAlarmOperationCompleted;
    
    private System.Threading.SendOrPostCallback PushRegisterDeviceOperationCompleted;
    
    private System.Threading.SendOrPostCallback PushMessageOperationCompleted;
    
    private System.Threading.SendOrPostCallback SyncCamerasOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetNotificationsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetNotificationsCountOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddClipOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetClipsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetClipsCountOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteNotificationOperationCompleted;
    
    private System.Threading.SendOrPostCallback EncryptOperationCompleted;
    
    private System.Threading.SendOrPostCallback CryptOperationCompleted;
    
    /// <remarks/>
    public IICUTechservice() {
        this.Url = "http://isapi.mekashron.com/icu-tech/ICUTech.dll/soap/IICUTech";
    }
    
    /// <remarks/>
    public event LoginCompletedEventHandler LoginCompleted;
    
    /// <remarks/>
    public event RegisterNewCustomerCompletedEventHandler RegisterNewCustomerCompleted;
    
    /// <remarks/>
    public event GetCustomerInfoCompletedEventHandler GetCustomerInfoCompleted;
    
    /// <remarks/>
    public event UpdateCustomerCompletedEventHandler UpdateCustomerCompleted;
    
    /// <remarks/>
    public event GetVersionCompletedEventHandler GetVersionCompleted;
    
    /// <remarks/>
    public event GetLocationsCompletedEventHandler GetLocationsCompleted;
    
    /// <remarks/>
    public event GetCamerasCompletedEventHandler GetCamerasCompleted;
    
    /// <remarks/>
    public event SetLocationCompletedEventHandler SetLocationCompleted;
    
    /// <remarks/>
    public event SetCameraCompletedEventHandler SetCameraCompleted;
    
    /// <remarks/>
    public event SetAlarmCompletedEventHandler SetAlarmCompleted;
    
    /// <remarks/>
    public event PushRegisterDeviceCompletedEventHandler PushRegisterDeviceCompleted;
    
    /// <remarks/>
    public event PushMessageCompletedEventHandler PushMessageCompleted;
    
    /// <remarks/>
    public event SyncCamerasCompletedEventHandler SyncCamerasCompleted;
    
    /// <remarks/>
    public event GetNotificationsCompletedEventHandler GetNotificationsCompleted;
    
    /// <remarks/>
    public event GetNotificationsCountCompletedEventHandler GetNotificationsCountCompleted;
    
    /// <remarks/>
    public event AddClipCompletedEventHandler AddClipCompleted;
    
    /// <remarks/>
    public event GetClipsCompletedEventHandler GetClipsCompleted;
    
    /// <remarks/>
    public event GetClipsCountCompletedEventHandler GetClipsCountCompleted;
    
    /// <remarks/>
    public event DeleteNotificationCompletedEventHandler DeleteNotificationCompleted;
    
    /// <remarks/>
    public event EncryptCompletedEventHandler EncryptCompleted;
    
    /// <remarks/>
    public event CryptCompletedEventHandler CryptCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#Login", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string Login(string UserName, string Password, string IPs) {
        object[] results = this.Invoke("Login", new object[] {
                    UserName,
                    Password,
                    IPs});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogin(string UserName, string Password, string IPs, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Login", new object[] {
                    UserName,
                    Password,
                    IPs}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LoginAsync(string UserName, string Password, string IPs) {
        this.LoginAsync(UserName, Password, IPs, null);
    }
    
    /// <remarks/>
    public void LoginAsync(string UserName, string Password, string IPs, object userState) {
        if ((this.LoginOperationCompleted == null)) {
            this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
        }
        this.InvokeAsync("Login", new object[] {
                    UserName,
                    Password,
                    IPs}, this.LoginOperationCompleted, userState);
    }
    
    private void OnLoginOperationCompleted(object arg) {
        if ((this.LoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#RegisterNewCustomer", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string RegisterNewCustomer(string Email, string Password, string FirstName, string LastName, string Mobile, int CountryID, int aID, string SignupIP) {
        object[] results = this.Invoke("RegisterNewCustomer", new object[] {
                    Email,
                    Password,
                    FirstName,
                    LastName,
                    Mobile,
                    CountryID,
                    aID,
                    SignupIP});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRegisterNewCustomer(string Email, string Password, string FirstName, string LastName, string Mobile, int CountryID, int aID, string SignupIP, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RegisterNewCustomer", new object[] {
                    Email,
                    Password,
                    FirstName,
                    LastName,
                    Mobile,
                    CountryID,
                    aID,
                    SignupIP}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndRegisterNewCustomer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void RegisterNewCustomerAsync(string Email, string Password, string FirstName, string LastName, string Mobile, int CountryID, int aID, string SignupIP) {
        this.RegisterNewCustomerAsync(Email, Password, FirstName, LastName, Mobile, CountryID, aID, SignupIP, null);
    }
    
    /// <remarks/>
    public void RegisterNewCustomerAsync(string Email, string Password, string FirstName, string LastName, string Mobile, int CountryID, int aID, string SignupIP, object userState) {
        if ((this.RegisterNewCustomerOperationCompleted == null)) {
            this.RegisterNewCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterNewCustomerOperationCompleted);
        }
        this.InvokeAsync("RegisterNewCustomer", new object[] {
                    Email,
                    Password,
                    FirstName,
                    LastName,
                    Mobile,
                    CountryID,
                    aID,
                    SignupIP}, this.RegisterNewCustomerOperationCompleted, userState);
    }
    
    private void OnRegisterNewCustomerOperationCompleted(object arg) {
        if ((this.RegisterNewCustomerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RegisterNewCustomerCompleted(this, new RegisterNewCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#GetCustomerInfo", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string GetCustomerInfo(int EntityID, string Username, string Password) {
        object[] results = this.Invoke("GetCustomerInfo", new object[] {
                    EntityID,
                    Username,
                    Password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCustomerInfo(int EntityID, string Username, string Password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCustomerInfo", new object[] {
                    EntityID,
                    Username,
                    Password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetCustomerInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetCustomerInfoAsync(int EntityID, string Username, string Password) {
        this.GetCustomerInfoAsync(EntityID, Username, Password, null);
    }
    
    /// <remarks/>
    public void GetCustomerInfoAsync(int EntityID, string Username, string Password, object userState) {
        if ((this.GetCustomerInfoOperationCompleted == null)) {
            this.GetCustomerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerInfoOperationCompleted);
        }
        this.InvokeAsync("GetCustomerInfo", new object[] {
                    EntityID,
                    Username,
                    Password}, this.GetCustomerInfoOperationCompleted, userState);
    }
    
    private void OnGetCustomerInfoOperationCompleted(object arg) {
        if ((this.GetCustomerInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCustomerInfoCompleted(this, new GetCustomerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#UpdateCustomer", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string UpdateCustomer(int EntityID, string Username, string Password, string ValuesArray) {
        object[] results = this.Invoke("UpdateCustomer", new object[] {
                    EntityID,
                    Username,
                    Password,
                    ValuesArray});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateCustomer(int EntityID, string Username, string Password, string ValuesArray, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateCustomer", new object[] {
                    EntityID,
                    Username,
                    Password,
                    ValuesArray}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUpdateCustomer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateCustomerAsync(int EntityID, string Username, string Password, string ValuesArray) {
        this.UpdateCustomerAsync(EntityID, Username, Password, ValuesArray, null);
    }
    
    /// <remarks/>
    public void UpdateCustomerAsync(int EntityID, string Username, string Password, string ValuesArray, object userState) {
        if ((this.UpdateCustomerOperationCompleted == null)) {
            this.UpdateCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerOperationCompleted);
        }
        this.InvokeAsync("UpdateCustomer", new object[] {
                    EntityID,
                    Username,
                    Password,
                    ValuesArray}, this.UpdateCustomerOperationCompleted, userState);
    }
    
    private void OnUpdateCustomerOperationCompleted(object arg) {
        if ((this.UpdateCustomerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateCustomerCompleted(this, new UpdateCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#GetVersion", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string GetVersion() {
        object[] results = this.Invoke("GetVersion", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetVersion(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetVersion", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetVersion(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetVersionAsync() {
        this.GetVersionAsync(null);
    }
    
    /// <remarks/>
    public void GetVersionAsync(object userState) {
        if ((this.GetVersionOperationCompleted == null)) {
            this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
        }
        this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
    }
    
    private void OnGetVersionOperationCompleted(object arg) {
        if ((this.GetVersionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#GetLocations", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string GetLocations(int EntityID, string Username, string Password) {
        object[] results = this.Invoke("GetLocations", new object[] {
                    EntityID,
                    Username,
                    Password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLocations(int EntityID, string Username, string Password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLocations", new object[] {
                    EntityID,
                    Username,
                    Password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetLocations(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetLocationsAsync(int EntityID, string Username, string Password) {
        this.GetLocationsAsync(EntityID, Username, Password, null);
    }
    
    /// <remarks/>
    public void GetLocationsAsync(int EntityID, string Username, string Password, object userState) {
        if ((this.GetLocationsOperationCompleted == null)) {
            this.GetLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsOperationCompleted);
        }
        this.InvokeAsync("GetLocations", new object[] {
                    EntityID,
                    Username,
                    Password}, this.GetLocationsOperationCompleted, userState);
    }
    
    private void OnGetLocationsOperationCompleted(object arg) {
        if ((this.GetLocationsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLocationsCompleted(this, new GetLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#GetCameras", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string GetCameras(int EntityID, string Username, string Password) {
        object[] results = this.Invoke("GetCameras", new object[] {
                    EntityID,
                    Username,
                    Password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCameras(int EntityID, string Username, string Password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCameras", new object[] {
                    EntityID,
                    Username,
                    Password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetCameras(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetCamerasAsync(int EntityID, string Username, string Password) {
        this.GetCamerasAsync(EntityID, Username, Password, null);
    }
    
    /// <remarks/>
    public void GetCamerasAsync(int EntityID, string Username, string Password, object userState) {
        if ((this.GetCamerasOperationCompleted == null)) {
            this.GetCamerasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCamerasOperationCompleted);
        }
        this.InvokeAsync("GetCameras", new object[] {
                    EntityID,
                    Username,
                    Password}, this.GetCamerasOperationCompleted, userState);
    }
    
    private void OnGetCamerasOperationCompleted(object arg) {
        if ((this.GetCamerasCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCamerasCompleted(this, new GetCamerasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#SetLocation", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string SetLocation(int EntityID, string Username, string Password, string IP, int Port, int MediaPort) {
        object[] results = this.Invoke("SetLocation", new object[] {
                    EntityID,
                    Username,
                    Password,
                    IP,
                    Port,
                    MediaPort});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetLocation(int EntityID, string Username, string Password, string IP, int Port, int MediaPort, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetLocation", new object[] {
                    EntityID,
                    Username,
                    Password,
                    IP,
                    Port,
                    MediaPort}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSetLocation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SetLocationAsync(int EntityID, string Username, string Password, string IP, int Port, int MediaPort) {
        this.SetLocationAsync(EntityID, Username, Password, IP, Port, MediaPort, null);
    }
    
    /// <remarks/>
    public void SetLocationAsync(int EntityID, string Username, string Password, string IP, int Port, int MediaPort, object userState) {
        if ((this.SetLocationOperationCompleted == null)) {
            this.SetLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLocationOperationCompleted);
        }
        this.InvokeAsync("SetLocation", new object[] {
                    EntityID,
                    Username,
                    Password,
                    IP,
                    Port,
                    MediaPort}, this.SetLocationOperationCompleted, userState);
    }
    
    private void OnSetLocationOperationCompleted(object arg) {
        if ((this.SetLocationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetLocationCompleted(this, new SetLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#SetCamera", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string SetCamera(int EntityID, string Username, string Password, string LocationName, string URL, int CameraId) {
        object[] results = this.Invoke("SetCamera", new object[] {
                    EntityID,
                    Username,
                    Password,
                    LocationName,
                    URL,
                    CameraId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetCamera(int EntityID, string Username, string Password, string LocationName, string URL, int CameraId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetCamera", new object[] {
                    EntityID,
                    Username,
                    Password,
                    LocationName,
                    URL,
                    CameraId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSetCamera(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SetCameraAsync(int EntityID, string Username, string Password, string LocationName, string URL, int CameraId) {
        this.SetCameraAsync(EntityID, Username, Password, LocationName, URL, CameraId, null);
    }
    
    /// <remarks/>
    public void SetCameraAsync(int EntityID, string Username, string Password, string LocationName, string URL, int CameraId, object userState) {
        if ((this.SetCameraOperationCompleted == null)) {
            this.SetCameraOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCameraOperationCompleted);
        }
        this.InvokeAsync("SetCamera", new object[] {
                    EntityID,
                    Username,
                    Password,
                    LocationName,
                    URL,
                    CameraId}, this.SetCameraOperationCompleted, userState);
    }
    
    private void OnSetCameraOperationCompleted(object arg) {
        if ((this.SetCameraCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetCameraCompleted(this, new SetCameraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#SetAlarm", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string SetAlarm(int EntityID, string Username, string Password, int Status) {
        object[] results = this.Invoke("SetAlarm", new object[] {
                    EntityID,
                    Username,
                    Password,
                    Status});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetAlarm(int EntityID, string Username, string Password, int Status, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetAlarm", new object[] {
                    EntityID,
                    Username,
                    Password,
                    Status}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSetAlarm(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SetAlarmAsync(int EntityID, string Username, string Password, int Status) {
        this.SetAlarmAsync(EntityID, Username, Password, Status, null);
    }
    
    /// <remarks/>
    public void SetAlarmAsync(int EntityID, string Username, string Password, int Status, object userState) {
        if ((this.SetAlarmOperationCompleted == null)) {
            this.SetAlarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAlarmOperationCompleted);
        }
        this.InvokeAsync("SetAlarm", new object[] {
                    EntityID,
                    Username,
                    Password,
                    Status}, this.SetAlarmOperationCompleted, userState);
    }
    
    private void OnSetAlarmOperationCompleted(object arg) {
        if ((this.SetAlarmCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetAlarmCompleted(this, new SetAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#PushRegisterDevice", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string PushRegisterDevice(int EntityID, string Username, string Password, string UDID, string DeviceID, int TypeId, bool AllowNotification) {
        object[] results = this.Invoke("PushRegisterDevice", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    DeviceID,
                    TypeId,
                    AllowNotification});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPushRegisterDevice(int EntityID, string Username, string Password, string UDID, string DeviceID, int TypeId, bool AllowNotification, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PushRegisterDevice", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    DeviceID,
                    TypeId,
                    AllowNotification}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndPushRegisterDevice(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void PushRegisterDeviceAsync(int EntityID, string Username, string Password, string UDID, string DeviceID, int TypeId, bool AllowNotification) {
        this.PushRegisterDeviceAsync(EntityID, Username, Password, UDID, DeviceID, TypeId, AllowNotification, null);
    }
    
    /// <remarks/>
    public void PushRegisterDeviceAsync(int EntityID, string Username, string Password, string UDID, string DeviceID, int TypeId, bool AllowNotification, object userState) {
        if ((this.PushRegisterDeviceOperationCompleted == null)) {
            this.PushRegisterDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPushRegisterDeviceOperationCompleted);
        }
        this.InvokeAsync("PushRegisterDevice", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    DeviceID,
                    TypeId,
                    AllowNotification}, this.PushRegisterDeviceOperationCompleted, userState);
    }
    
    private void OnPushRegisterDeviceOperationCompleted(object arg) {
        if ((this.PushRegisterDeviceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PushRegisterDeviceCompleted(this, new PushRegisterDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#PushMessage", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string PushMessage(int EntityID, string Username, string Password, string text, string FunctionPassword, int KindType, int KindID) {
        object[] results = this.Invoke("PushMessage", new object[] {
                    EntityID,
                    Username,
                    Password,
                    text,
                    FunctionPassword,
                    KindType,
                    KindID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPushMessage(int EntityID, string Username, string Password, string text, string FunctionPassword, int KindType, int KindID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PushMessage", new object[] {
                    EntityID,
                    Username,
                    Password,
                    text,
                    FunctionPassword,
                    KindType,
                    KindID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndPushMessage(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void PushMessageAsync(int EntityID, string Username, string Password, string text, string FunctionPassword, int KindType, int KindID) {
        this.PushMessageAsync(EntityID, Username, Password, text, FunctionPassword, KindType, KindID, null);
    }
    
    /// <remarks/>
    public void PushMessageAsync(int EntityID, string Username, string Password, string text, string FunctionPassword, int KindType, int KindID, object userState) {
        if ((this.PushMessageOperationCompleted == null)) {
            this.PushMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPushMessageOperationCompleted);
        }
        this.InvokeAsync("PushMessage", new object[] {
                    EntityID,
                    Username,
                    Password,
                    text,
                    FunctionPassword,
                    KindType,
                    KindID}, this.PushMessageOperationCompleted, userState);
    }
    
    private void OnPushMessageOperationCompleted(object arg) {
        if ((this.PushMessageCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PushMessageCompleted(this, new PushMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#SyncCameras", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string SyncCameras(int EntityID, string Username, string Password, int CamerasCount, int[] CameraIds, string[] CameraNames) {
        object[] results = this.Invoke("SyncCameras", new object[] {
                    EntityID,
                    Username,
                    Password,
                    CamerasCount,
                    CameraIds,
                    CameraNames});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSyncCameras(int EntityID, string Username, string Password, int CamerasCount, int[] CameraIds, string[] CameraNames, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SyncCameras", new object[] {
                    EntityID,
                    Username,
                    Password,
                    CamerasCount,
                    CameraIds,
                    CameraNames}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSyncCameras(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SyncCamerasAsync(int EntityID, string Username, string Password, int CamerasCount, int[] CameraIds, string[] CameraNames) {
        this.SyncCamerasAsync(EntityID, Username, Password, CamerasCount, CameraIds, CameraNames, null);
    }
    
    /// <remarks/>
    public void SyncCamerasAsync(int EntityID, string Username, string Password, int CamerasCount, int[] CameraIds, string[] CameraNames, object userState) {
        if ((this.SyncCamerasOperationCompleted == null)) {
            this.SyncCamerasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSyncCamerasOperationCompleted);
        }
        this.InvokeAsync("SyncCameras", new object[] {
                    EntityID,
                    Username,
                    Password,
                    CamerasCount,
                    CameraIds,
                    CameraNames}, this.SyncCamerasOperationCompleted, userState);
    }
    
    private void OnSyncCamerasOperationCompleted(object arg) {
        if ((this.SyncCamerasCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SyncCamerasCompleted(this, new SyncCamerasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#GetNotifications", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string GetNotifications(int EntityID, string Username, string Password, string UDID, int ResultType, int LimitFrom, int LimitTo) {
        object[] results = this.Invoke("GetNotifications", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    ResultType,
                    LimitFrom,
                    LimitTo});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetNotifications(int EntityID, string Username, string Password, string UDID, int ResultType, int LimitFrom, int LimitTo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetNotifications", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    ResultType,
                    LimitFrom,
                    LimitTo}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetNotifications(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetNotificationsAsync(int EntityID, string Username, string Password, string UDID, int ResultType, int LimitFrom, int LimitTo) {
        this.GetNotificationsAsync(EntityID, Username, Password, UDID, ResultType, LimitFrom, LimitTo, null);
    }
    
    /// <remarks/>
    public void GetNotificationsAsync(int EntityID, string Username, string Password, string UDID, int ResultType, int LimitFrom, int LimitTo, object userState) {
        if ((this.GetNotificationsOperationCompleted == null)) {
            this.GetNotificationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNotificationsOperationCompleted);
        }
        this.InvokeAsync("GetNotifications", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    ResultType,
                    LimitFrom,
                    LimitTo}, this.GetNotificationsOperationCompleted, userState);
    }
    
    private void OnGetNotificationsOperationCompleted(object arg) {
        if ((this.GetNotificationsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetNotificationsCompleted(this, new GetNotificationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#GetNotificationsCount", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string GetNotificationsCount(int EntityID, string Username, string Password, string UDID, int ResultType) {
        object[] results = this.Invoke("GetNotificationsCount", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    ResultType});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetNotificationsCount(int EntityID, string Username, string Password, string UDID, int ResultType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetNotificationsCount", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    ResultType}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetNotificationsCount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetNotificationsCountAsync(int EntityID, string Username, string Password, string UDID, int ResultType) {
        this.GetNotificationsCountAsync(EntityID, Username, Password, UDID, ResultType, null);
    }
    
    /// <remarks/>
    public void GetNotificationsCountAsync(int EntityID, string Username, string Password, string UDID, int ResultType, object userState) {
        if ((this.GetNotificationsCountOperationCompleted == null)) {
            this.GetNotificationsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNotificationsCountOperationCompleted);
        }
        this.InvokeAsync("GetNotificationsCount", new object[] {
                    EntityID,
                    Username,
                    Password,
                    UDID,
                    ResultType}, this.GetNotificationsCountOperationCompleted, userState);
    }
    
    private void OnGetNotificationsCountOperationCompleted(object arg) {
        if ((this.GetNotificationsCountCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetNotificationsCountCompleted(this, new GetNotificationsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#AddClip", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string AddClip(int EntityId, string UserName, string Password, int cameraID, int clipID, int ClipLength, string ClipDate) {
        object[] results = this.Invoke("AddClip", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    cameraID,
                    clipID,
                    ClipLength,
                    ClipDate});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddClip(int EntityId, string UserName, string Password, int cameraID, int clipID, int ClipLength, string ClipDate, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddClip", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    cameraID,
                    clipID,
                    ClipLength,
                    ClipDate}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndAddClip(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void AddClipAsync(int EntityId, string UserName, string Password, int cameraID, int clipID, int ClipLength, string ClipDate) {
        this.AddClipAsync(EntityId, UserName, Password, cameraID, clipID, ClipLength, ClipDate, null);
    }
    
    /// <remarks/>
    public void AddClipAsync(int EntityId, string UserName, string Password, int cameraID, int clipID, int ClipLength, string ClipDate, object userState) {
        if ((this.AddClipOperationCompleted == null)) {
            this.AddClipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClipOperationCompleted);
        }
        this.InvokeAsync("AddClip", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    cameraID,
                    clipID,
                    ClipLength,
                    ClipDate}, this.AddClipOperationCompleted, userState);
    }
    
    private void OnAddClipOperationCompleted(object arg) {
        if ((this.AddClipCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddClipCompleted(this, new AddClipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#GetClips", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string GetClips(int EntityId, string UserName, string Password, int ResultType, int cameraID, string DateFrom, string DateTo, int LimitFrom, int LimitTo) {
        object[] results = this.Invoke("GetClips", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    ResultType,
                    cameraID,
                    DateFrom,
                    DateTo,
                    LimitFrom,
                    LimitTo});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetClips(int EntityId, string UserName, string Password, int ResultType, int cameraID, string DateFrom, string DateTo, int LimitFrom, int LimitTo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetClips", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    ResultType,
                    cameraID,
                    DateFrom,
                    DateTo,
                    LimitFrom,
                    LimitTo}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetClips(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetClipsAsync(int EntityId, string UserName, string Password, int ResultType, int cameraID, string DateFrom, string DateTo, int LimitFrom, int LimitTo) {
        this.GetClipsAsync(EntityId, UserName, Password, ResultType, cameraID, DateFrom, DateTo, LimitFrom, LimitTo, null);
    }
    
    /// <remarks/>
    public void GetClipsAsync(int EntityId, string UserName, string Password, int ResultType, int cameraID, string DateFrom, string DateTo, int LimitFrom, int LimitTo, object userState) {
        if ((this.GetClipsOperationCompleted == null)) {
            this.GetClipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClipsOperationCompleted);
        }
        this.InvokeAsync("GetClips", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    ResultType,
                    cameraID,
                    DateFrom,
                    DateTo,
                    LimitFrom,
                    LimitTo}, this.GetClipsOperationCompleted, userState);
    }
    
    private void OnGetClipsOperationCompleted(object arg) {
        if ((this.GetClipsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetClipsCompleted(this, new GetClipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#GetClipsCount", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string GetClipsCount(int EntityId, string UserName, string Password, int ResultType, int cameraID, string DateFrom, string DateTo) {
        object[] results = this.Invoke("GetClipsCount", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    ResultType,
                    cameraID,
                    DateFrom,
                    DateTo});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetClipsCount(int EntityId, string UserName, string Password, int ResultType, int cameraID, string DateFrom, string DateTo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetClipsCount", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    ResultType,
                    cameraID,
                    DateFrom,
                    DateTo}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetClipsCount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetClipsCountAsync(int EntityId, string UserName, string Password, int ResultType, int cameraID, string DateFrom, string DateTo) {
        this.GetClipsCountAsync(EntityId, UserName, Password, ResultType, cameraID, DateFrom, DateTo, null);
    }
    
    /// <remarks/>
    public void GetClipsCountAsync(int EntityId, string UserName, string Password, int ResultType, int cameraID, string DateFrom, string DateTo, object userState) {
        if ((this.GetClipsCountOperationCompleted == null)) {
            this.GetClipsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClipsCountOperationCompleted);
        }
        this.InvokeAsync("GetClipsCount", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    ResultType,
                    cameraID,
                    DateFrom,
                    DateTo}, this.GetClipsCountOperationCompleted, userState);
    }
    
    private void OnGetClipsCountOperationCompleted(object arg) {
        if ((this.GetClipsCountCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetClipsCountCompleted(this, new GetClipsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#DeleteNotification", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string DeleteNotification(int EntityID, string Username, string Password, int NotificationID) {
        object[] results = this.Invoke("DeleteNotification", new object[] {
                    EntityID,
                    Username,
                    Password,
                    NotificationID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteNotification(int EntityID, string Username, string Password, int NotificationID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteNotification", new object[] {
                    EntityID,
                    Username,
                    Password,
                    NotificationID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndDeleteNotification(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteNotificationAsync(int EntityID, string Username, string Password, int NotificationID) {
        this.DeleteNotificationAsync(EntityID, Username, Password, NotificationID, null);
    }
    
    /// <remarks/>
    public void DeleteNotificationAsync(int EntityID, string Username, string Password, int NotificationID, object userState) {
        if ((this.DeleteNotificationOperationCompleted == null)) {
            this.DeleteNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteNotificationOperationCompleted);
        }
        this.InvokeAsync("DeleteNotification", new object[] {
                    EntityID,
                    Username,
                    Password,
                    NotificationID}, this.DeleteNotificationOperationCompleted, userState);
    }
    
    private void OnDeleteNotificationOperationCompleted(object arg) {
        if ((this.DeleteNotificationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteNotificationCompleted(this, new DeleteNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#Encrypt", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string Encrypt(string DataString) {
        object[] results = this.Invoke("Encrypt", new object[] {
                    DataString});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginEncrypt(string DataString, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Encrypt", new object[] {
                    DataString}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndEncrypt(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void EncryptAsync(string DataString) {
        this.EncryptAsync(DataString, null);
    }
    
    /// <remarks/>
    public void EncryptAsync(string DataString, object userState) {
        if ((this.EncryptOperationCompleted == null)) {
            this.EncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptOperationCompleted);
        }
        this.InvokeAsync("Encrypt", new object[] {
                    DataString}, this.EncryptOperationCompleted, userState);
    }
    
    private void OnEncryptOperationCompleted(object arg) {
        if ((this.EncryptCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.EncryptCompleted(this, new EncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ICUTech.Intf-IICUTech#Crypt", RequestNamespace="urn:ICUTech.Intf-IICUTech", ResponseNamespace="urn:ICUTech.Intf-IICUTech")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public string Crypt(int EntityId, string UserName, string Password, string FuncPassword) {
        object[] results = this.Invoke("Crypt", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    FuncPassword});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCrypt(int EntityId, string UserName, string Password, string FuncPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Crypt", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    FuncPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCrypt(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CryptAsync(int EntityId, string UserName, string Password, string FuncPassword) {
        this.CryptAsync(EntityId, UserName, Password, FuncPassword, null);
    }
    
    /// <remarks/>
    public void CryptAsync(int EntityId, string UserName, string Password, string FuncPassword, object userState) {
        if ((this.CryptOperationCompleted == null)) {
            this.CryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCryptOperationCompleted);
        }
        this.InvokeAsync("Crypt", new object[] {
                    EntityId,
                    UserName,
                    Password,
                    FuncPassword}, this.CryptOperationCompleted, userState);
    }
    
    private void OnCryptOperationCompleted(object arg) {
        if ((this.CryptCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CryptCompleted(this, new CryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void RegisterNewCustomerCompletedEventHandler(object sender, RegisterNewCustomerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RegisterNewCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RegisterNewCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetCustomerInfoCompletedEventHandler(object sender, GetCustomerInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCustomerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCustomerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void UpdateCustomerCompletedEventHandler(object sender, UpdateCustomerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetLocationsCompletedEventHandler(object sender, GetLocationsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetCamerasCompletedEventHandler(object sender, GetCamerasCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCamerasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCamerasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void SetLocationCompletedEventHandler(object sender, SetLocationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void SetCameraCompletedEventHandler(object sender, SetCameraCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetCameraCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetCameraCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void SetAlarmCompletedEventHandler(object sender, SetAlarmCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetAlarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetAlarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void PushRegisterDeviceCompletedEventHandler(object sender, PushRegisterDeviceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PushRegisterDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PushRegisterDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void PushMessageCompletedEventHandler(object sender, PushMessageCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PushMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PushMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void SyncCamerasCompletedEventHandler(object sender, SyncCamerasCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SyncCamerasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SyncCamerasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetNotificationsCompletedEventHandler(object sender, GetNotificationsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetNotificationsCountCompletedEventHandler(object sender, GetNotificationsCountCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetNotificationsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetNotificationsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void AddClipCompletedEventHandler(object sender, AddClipCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddClipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddClipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetClipsCompletedEventHandler(object sender, GetClipsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetClipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetClipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetClipsCountCompletedEventHandler(object sender, GetClipsCountCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetClipsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetClipsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void DeleteNotificationCompletedEventHandler(object sender, DeleteNotificationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void EncryptCompletedEventHandler(object sender, EncryptCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class EncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal EncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void CryptCompletedEventHandler(object sender, CryptCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
